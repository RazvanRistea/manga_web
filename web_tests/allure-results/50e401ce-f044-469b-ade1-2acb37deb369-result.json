{"name": "test[features/forgot_password.feature-Forgot password tests-Register new user and then try to reset password with invalid password]", "status": "broken", "statusDetails": {"message": "KeyError: 'email'", "trace": "self = <pytest_bdd.runner.ScenarioRunner object at 0x105429750>, item = <Function test[features/forgot_password.feature-Forgot password tests-Register new user and then try to reset password with invalid password]>\n\n    def pytest_runtest_call(self, item: Item):\n        if \"pytest_bdd_scenario\" in list(map(attrgetter(\"name\"), item.iter_markers())):\n            self.request = item._request\n            self.feature = self.request.getfixturevalue(\"feature\")\n            self.scenario = self.request.getfixturevalue(\"scenario\")\n            self.plugin_manager = self.request.config.hook\n            self.plugin_manager.pytest_bdd_before_scenario(\n                request=self.request, feature=self.feature, scenario=self.scenario\n            )\n            try:\n>               self.plugin_manager.pytest_bdd_run_scenario(\n                    request=self.request,\n                    feature=self.feature,\n                    scenario=self.scenario,\n                )\n\n../venv/lib/python3.10/site-packages/pytest_bdd/runner.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.10/site-packages/pytest_bdd/runner.py:57: in pytest_bdd_run_scenario\n    return step_dispatcher(steps)\n../venv/lib/python3.10/site-packages/pytest_bdd/runner.py:67: in dispatcher\n    self.plugin_manager.pytest_bdd_run_step(\n../venv/lib/python3.10/site-packages/pytest_bdd/runner.py:108: in pytest_bdd_run_step\n    step_result = step_caller()\ntest_reset_password.py:35: in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n../api_resources/api_steps/player_steps.py:46: in registerNewUser\n    checkUser()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @step(\"Verify user data has been created.\")\n    def checkUser():\n        BaseAssertions().assertEquals(sms_request.status_code, 200)\n        BaseAssertions().assertEquals(sms_verification.status_code, 200)\n>       BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\nE       KeyError: 'email'\n\n../api_resources/api_steps/player_steps.py:38: KeyError"}, "steps": [{"name": "Register new user and then try to reset password with invalid password [features/forgot_password.feature-Forgot password tests-Register new user and then try to reset password with invalid password]", "steps": [{"name": "Given User is not logged in.", "status": "passed", "steps": [{"name": "Given User is not logged in.", "status": "passed", "steps": [{"name": "Given User is not logged in.", "status": "passed", "steps": [{"name": "Given User is not logged in.", "status": "passed", "steps": [{"name": "Given User is not logged in.", "status": "passed", "steps": [{"name": "Given User is not logged in.", "status": "passed", "steps": [{"name": "User is not logged in.", "status": "passed", "steps": [{"name": "Checking if user is not logged in.", "status": "passed", "steps": [{"name": "Assert Message equals.", "status": "passed", "parameters": [{"name": "actual", "value": "True"}, {"name": "expected", "value": "True"}], "start": 1675062071944, "stop": 1675062071944}], "start": 1675062071919, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}], "parameters": [{"name": "pages", "value": "{'about_page': <pages.about_page.AboutPage object at 0x106290550>, 'login_page': <pages.login_page.LoginPage object at 0x106293eb0>, 'registration_page': <pages.registration_page.RegistrationPage object at 0x106291bd0>, 'forgot_password_page': <pages.forgot_password_page.ForgotPasswordPage object at 0x106291840>}"}], "start": 1675062071918, "stop": 1675062071944}, {"name": "And I create a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  [Previous line repeated 3 more times]\n  File \"/Users/razvan/Work/qa_manga_web/web_tests/test_reset_password.py\", line 35, in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "And I create a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  [Previous line repeated 2 more times]\n  File \"/Users/razvan/Work/qa_manga_web/web_tests/test_reset_password.py\", line 35, in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "And I create a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  [Previous line repeated 1 more time]\n  File \"/Users/razvan/Work/qa_manga_web/web_tests/test_reset_password.py\", line 35, in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "And I create a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/web_tests/test_reset_password.py\", line 35, in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "And I create a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/web_tests/test_reset_password.py\", line 35, in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "I create a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/web_tests/test_reset_password.py\", line 35, in register_new_user\n    newRegisteredUserData = Player().registerNewUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "Generating used date all data is random except the arguments that are passed", "status": "passed", "parameters": [{"name": "userName", "value": "None"}, {"name": "firstName", "value": "None"}, {"name": "lastName", "value": "None"}, {"name": "email", "value": "None"}, {"name": "password", "value": "None"}, {"name": "phone", "value": "None"}, {"name": "dateOfBirth", "value": "None"}, {"name": "street", "value": "None"}, {"name": "postCode", "value": "None"}, {"name": "city", "value": "None"}, {"name": "countryCode", "value": "None"}], "start": 1675062071944, "stop": 1675062071962}, {"name": "Api calls to register a new user.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 46, in registerNewUser\n    checkUser()\n  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "Create payload for new user registration step one.", "status": "passed", "parameters": [{"name": "firstName", "value": "None"}, {"name": "lastName", "value": "None"}, {"name": "email", "value": "None"}, {"name": "mobilePhone", "value": "None"}, {"name": "password", "value": "None"}], "start": 1675062071974, "stop": 1675062071974}, {"name": "First step register new user.", "status": "passed", "steps": [{"name": "POST request to: https://zsz7drf3re.execute-api.eu-west-1.amazonaws.com/dev/api/v1/player/registration", "status": "passed", "start": 1675062071975, "stop": 1675062072214}], "parameters": [{"name": "payload", "value": "'{\"firstName\": \"AUTOTESTCrystal\", \"lastName\": \"Warner\", \"email\": \"qarrbet+29428@gmail.com\", \"mobilePhone\": \"+3581797809\", \"password\": \"QAPassword1!\"}'"}], "start": 1675062071974, "stop": 1675062072214}, {"name": "Create payload for new user registration step two.", "status": "passed", "parameters": [{"name": "dateOfBirth", "value": "None"}, {"name": "postCode", "value": "None"}, {"name": "city", "value": "None"}, {"name": "street", "value": "None"}, {"name": "playerId", "value": "29956"}], "start": 1675062072214, "stop": 1675062072214}, {"name": "Second step register new user.", "status": "passed", "steps": [{"name": "PUT request to: https://zsz7drf3re.execute-api.eu-west-1.amazonaws.com/dev/api/v1/player/registration", "status": "passed", "start": 1675062072215, "stop": 1675062072492}], "parameters": [{"name": "payload", "value": "'{\"playerId\": 29956, \"currencyCode\": \"EUR\", \"gender\": \"m\", \"street\": \"Shelly Station\", \"city\": \"North Andrew\", \"marketingOptIn\": true, \"cookiePolicyAccepted\": true, \"allConditions\": true, \"mediaTag\": null, \"provinceCode\": null, \"termsAndConditionsAcceptedVersion\": 5, \"dateOfBirth\": \"1960-03-06\", \"postalCode\": \"63161\", \"countryCode\": \"FI\", \"termsAndConditionsAccepted\": true, \"languageCode\": \"en\"}'"}], "start": 1675062072214, "stop": 1675062072492}, {"name": "Create sms request payload", "status": "passed", "parameters": [{"name": "playerId", "value": "29956"}], "start": 1675062072492, "stop": 1675062072493}, {"name": "Request SMS", "status": "passed", "steps": [{"name": "POST request to: https://zsz7drf3re.execute-api.eu-west-1.amazonaws.com/dev/api/v1/player/registration/sms_request", "status": "passed", "start": 1675062072496, "stop": 1675062072697}], "parameters": [{"name": "payload", "value": "'{\"playerId\": 29956}'"}], "start": 1675062072493, "stop": 1675062072697}, {"name": "Send SMS verification payload", "status": "passed", "parameters": [{"name": "playerId", "value": "29956"}], "start": 1675062072697, "stop": 1675062072697}, {"name": "Send SMS confirmation", "status": "passed", "steps": [{"name": "POST request to: https://zsz7drf3re.execute-api.eu-west-1.amazonaws.com/dev/api/v1/player/registration/sms_verification", "status": "passed", "start": 1675062072702, "stop": 1675062072914}], "parameters": [{"name": "payload", "value": "'{\"playerId\": 29956, \"password\": \"QAPassword1!\", \"code\": \"1111\"}'"}], "start": 1675062072698, "stop": 1675062072915}, {"name": "Verify user data has been created.", "status": "broken", "statusDetails": {"message": "KeyError: 'email'\n", "trace": "  File \"/Users/razvan/Work/qa_manga_web/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/razvan/Work/qa_manga_web/api_resources/api_steps/player_steps.py\", line 38, in checkUser\n    BaseAssertions().assertEquals(payload_step_one['email'], register_user_step_two['email'])\n"}, "steps": [{"name": "Assert Message equals.", "status": "passed", "parameters": [{"name": "actual", "value": "200"}, {"name": "expected", "value": "200"}], "start": 1675062072915, "stop": 1675062072915}, {"name": "Assert Message equals.", "status": "passed", "parameters": [{"name": "actual", "value": "200"}, {"name": "expected", "value": "200"}], "start": 1675062072915, "stop": 1675062072915}], "start": 1675062072915, "stop": 1675062072915}], "start": 1675062071974, "stop": 1675062072915}], "parameters": [{"name": "context", "value": "{}"}], "start": 1675062071944, "stop": 1675062072916}], "parameters": [{"name": "context", "value": "{}"}], "start": 1675062071944, "stop": 1675062072916}], "parameters": [{"name": "context", "value": "{}"}], "start": 1675062071944, "stop": 1675062072916}], "parameters": [{"name": "context", "value": "{}"}], "start": 1675062071944, "stop": 1675062072916}], "parameters": [{"name": "context", "value": "{}"}], "start": 1675062071944, "stop": 1675062072916}], "parameters": [{"name": "context", "value": "{}"}], "start": 1675062071944, "stop": 1675062072916}], "parameters": [{"name": "feature", "value": {"gherkin_ast": {"gherkin_document": {"uri": "features/forgot_password.feature"}}, "uri": "features/forgot_password.feature", "filename": "/Users/razvan/Work/qa_manga_web/web_tests/features/forgot_password.feature", "scenarios": [{"ast_node_ids": ["3"], "id": "3", "name": "Register new user and then reset password for user", "language": "en", "steps": [{"ast_node_ids": ["0"], "id": "0", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["1"], "id": "1", "text": "I create a new user.", "type": "Context"}, {"ast_node_ids": ["2"], "id": "2", "text": "I reset the password.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}, {"ast_node_ids": ["7"], "id": "7", "name": "Reset password for a email that does not have an account", "language": "en", "steps": [{"ast_node_ids": ["4"], "id": "4", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["5"], "id": "5", "text": "I go to the reset password page and try to reset the password.", "type": "Context"}, {"ast_node_ids": ["6"], "id": "6", "text": "I will receive an not found error.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}, {"ast_node_ids": ["11"], "id": "11", "name": "Register new user and then and then reset password for user with an expired OTP code", "language": "en", "steps": [{"ast_node_ids": ["8"], "id": "8", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["9"], "id": "9", "text": "I create a new user.", "type": "Context"}, {"ast_node_ids": ["10"], "id": "10", "text": "I reset the password by waiting for the first OTP to expire.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}, {"ast_node_ids": ["16"], "id": "16", "name": "Register new user and then reset password for user then login", "language": "en", "steps": [{"ast_node_ids": ["12"], "id": "12", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["13"], "id": "13", "text": "I create a new user.", "type": "Context"}, {"ast_node_ids": ["14"], "id": "14", "text": "I reset the password.", "type": "Context"}, {"ast_node_ids": ["15"], "id": "15", "text": "I log in with the new password.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}, {"ast_node_ids": ["22"], "id": "22", "name": "Register new user and then reset password for user then login with old password", "language": "en", "steps": [{"ast_node_ids": ["17"], "id": "17", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["18"], "id": "18", "text": "I create a new user.", "type": "Context"}, {"ast_node_ids": ["19"], "id": "19", "text": "I reset the password.", "type": "Context"}, {"ast_node_ids": ["20"], "id": "20", "text": "I log in with the old password.", "type": "Context"}, {"ast_node_ids": ["21"], "id": "21", "text": "I should get an error for invalid password.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}, {"ast_node_ids": ["27"], "id": "27", "name": "Register new user and then try to reset password with invalid password", "language": "en", "steps": [{"ast_node_ids": ["23"], "id": "23", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["24"], "id": "24", "text": "I create a new user.", "type": "Context"}, {"ast_node_ids": ["25"], "id": "25", "text": "I enter a invalid password for password reset.", "type": "Context"}, {"ast_node_ids": ["26"], "id": "26", "text": "I will get an invalid password error.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}]}}, {"name": "scenario", "value": {"ast_node_ids": ["27"], "id": "27", "name": "Register new user and then try to reset password with invalid password", "language": "en", "steps": [{"ast_node_ids": ["23"], "id": "23", "text": "User is not logged in.", "type": "Context"}, {"ast_node_ids": ["24"], "id": "24", "text": "I create a new user.", "type": "Context"}, {"ast_node_ids": ["25"], "id": "25", "text": "I enter a invalid password for password reset.", "type": "Context"}, {"ast_node_ids": ["26"], "id": "26", "text": "I will get an invalid password error.", "type": "Outcome"}], "uri": "features/forgot_password.feature"}}], "start": 1675062071917, "stop": 1675062072917}], "attachments": [{"name": "log", "source": "2a3b59d4-3c65-43c8-83e9-1d531af626b4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "354d07e1-d41d-42fb-b069-7dc52628860b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "feature", "value": "Feature(gherkin_ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), uri='features/forgot_password.feature', filename='/Users/razvan/Work/qa_manga_web/web_tests/features/forgot_password.feature', scenarios=[Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['3'], id='3', name='Register new user and then reset password for user', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['0'], id='0', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['1'], id='1', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['2'], id='2', text='I reset the password.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['7'], id='7', name='Reset password for a email that does not have an account', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['4'], id='4', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['5'], id='5', text='I go to the reset password page and try to reset the password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['6'], id='6', text='I will receive an not found error.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['11'], id='11', name='Register new user and then and then reset password for user with an expired OTP code', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['8'], id='8', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['9'], id='9', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['10'], id='10', text='I reset the password by waiting for the first OTP to expire.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['16'], id='16', name='Register new user and then reset password for user then login', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['12'], id='12', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['13'], id='13', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['14'], id='14', text='I reset the password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['15'], id='15', text='I log in with the new password.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['22'], id='22', name='Register new user and then reset password for user then login with old password', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['17'], id='17', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['18'], id='18', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['19'], id='19', text='I reset the password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['20'], id='20', text='I log in with the old password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['21'], id='21', text='I should get an error for invalid password.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['27'], id='27', name='Register new user and then try to reset password with invalid password', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['23'], id='23', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['24'], id='24', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['25'], id='25', text='I enter a invalid password for password reset.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['26'], id='26', text='I will get an invalid password error.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...)])"}, {"name": "scenario", "value": "Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['27'], id='27', name='Register new user and then try to reset password with invalid password', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['23'], id='23', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['24'], id='24', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['25'], id='25', text='I enter a invalid password for password reset.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['26'], id='26', text='I will get an invalid password error.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=Feature(gherkin_ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), uri='features/forgot_password.feature', filename='/Users/razvan/Work/qa_manga_web/web_tests/features/forgot_password.feature', scenarios=[Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['3'], id='3', name='Register new user and then reset password for user', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['0'], id='0', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['1'], id='1', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['2'], id='2', text='I reset the password.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['7'], id='7', name='Reset password for a email that does not have an account', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['4'], id='4', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['5'], id='5', text='I go to the reset password page and try to reset the password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['6'], id='6', text='I will receive an not found error.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['11'], id='11', name='Register new user and then and then reset password for user with an expired OTP code', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['8'], id='8', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['9'], id='9', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['10'], id='10', text='I reset the password by waiting for the first OTP to expire.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['16'], id='16', name='Register new user and then reset password for user then login', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['12'], id='12', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['13'], id='13', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['14'], id='14', text='I reset the password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['15'], id='15', text='I log in with the new password.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), Scenario(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['22'], id='22', name='Register new user and then reset password for user then login with old password', language='en', steps=[Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['17'], id='17', text='User is not logged in.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['18'], id='18', text='I create a new user.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['19'], id='19', text='I reset the password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['20'], id='20', text='I log in with the old password.', type='Context', scenario=...), Step(ast=AST(gherkin_document=GherkinDocument(comments=[], uri='features/forgot_password.feature')), ast_node_ids=['21'], id='21', text='I should get an error for invalid password.', type='Outcome', scenario=...)], tags=[], uri='features/forgot_password.feature', feature=...), ...]))"}], "start": 1675062071917, "stop": 1675062072917, "uuid": "ad69480b-6cd1-44d3-9898-acf6a9530b62", "historyId": "db66c9b6f691f3dacc9943b370a3fd4a", "testCaseId": "57751742b4660f538a570923535cb2a4", "fullName": "test_reset_password#test", "labels": [{"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "Forgot password tests"}, {"name": "tag", "value": "@pytest.mark.usefixtures('feature', 'scenario')"}, {"name": "tag", "value": "pytest_bdd_scenario"}, {"name": "suite", "value": "test_reset_password"}, {"name": "host", "value": "Razvans-MacBook-Pro.local"}, {"name": "thread", "value": "16306-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_reset_password"}]}